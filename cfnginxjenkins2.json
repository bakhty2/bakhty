{

  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Nginx for CDH BCBSMA",

  "Parameters" : {

    "VpcId" : {
      "Type" : "AWS::EC2::VPC::Id",
      "Description" : "VpcId of your existing Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "must be the VPC Id of an existing Virtual Private Cloud."

    },

    "Subnets" : {
      "Type" : "List<AWS::EC2::Subnet::Id>",
      "Description" : "The list of SubnetIds in your Virtual Private Cloud (VPC)",
      "ConstraintDescription" : "------------"
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "t2.small",
      "AllowedValues" : [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium"]
,
      "ConstraintDescription" : "must be a valid EC2 instance type."

    },


    "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."

    },

    "KeyName" : {
      "Description" : "The EC2 Key Pair to allow SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."

    },

    "SSHLocation" : {

      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {

    "Region2Examples" : {
      "us-east-1"      : { "Examples" : "https://s3.amazonaws.com/cloudformation-examples-us-east-1" },
      "us-west-2"      : { "Examples" : "https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2" }
    }
,

    "AWSInstanceType2Arch" : {

      "t1.micro"    : { "Arch" : "HVM64"  },
      "t2.nano"     : { "Arch" : "HVM64"  },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "t2.large"    : { "Arch" : "HVM64"  }

    },

    "AWSInstanceType2NATArch" : {

      "t1.micro"    : { "Arch" : "NATHVM64"  },
      "t2.nano"     : { "Arch" : "NATHVM64"  },
      "t2.micro"    : { "Arch" : "NATHVM64"  },
      "t2.small"    : { "Arch" : "NATHVM64"  },
      "t2.medium"   : { "Arch" : "NATHVM64"  },
      "t2.large"    : { "Arch" : "NATHVM64"  }

    }

,

    "AWSRegionArch2AMI" : {

      "us-east-1"        : {"HVM64" : "ami-0ff8a91507f77f867", "HVMG2" : "ami-0a584ac55a7631c0c"},

      "us-west-2"        : {"HVM64" : "ami-a0cfeed8", "HVMG2" : "ami-0e09505bc235aa82d"}

    }


  },


  "Resources" : {
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}

        },

        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : { "Ref" : "SSHLocation"}
        } ],
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ],
        "NotificationConfiguration" : {
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  "autoscaling:EC2_INSTANCE_TERMINATE",
                                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment" : "Install Nginx",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "nginx" : []
              }

            },

            "files" : {
              "/etc/nginx/nginx.conf" : {
                "content" : { "Fn::Join" : ["", [


                  "upstream manager {\n",
                        "ip_hash; \n",
                        "server ipaddress:7183; \n",
                  "}\n\n",

                  "upstream hue {\n",
                        "ip_hash; \n",
                        "server 10.33.0.144:8888; \n",
                        "server 10.33.1.69:8888; \n",
                  "}\n\n",

                  "upstream navigator {\n",
                        "ip_hash; \n",
                        "server 10.33.0.8:7187; \n",
                  "}\n\n",

                        "upstream oozie {\n",
                        "ip_hash; \n",
                        "server ipaddress:11443; \n",
                        "server ipaddress:11443; \n",
                  "}\n\n",


                  "server_name eah.bcbsma.com {\n",
                        "charset utf-8; \n",
                        "client_max_body_size 0; \n",

                        "listen 7183 ssl;\n",
                        "ssl_certificate /etc/nginx/ssl/signcert.cer;\n",
                        "ssl_certificate_key /etc/nginx/ssl/certkey.key;\n",

                  "location / {\n",
                        "proxy_pass https://manager;\n",
                        "proxy_set_header Host $http_host;\n",
                        "proxy_set_header X-Forwarded-For $remote_addr;\n",
                        "proxy_ssl_trusted_certificate /etc/nginx/ssl/trustcert.cer;\n\n",
                "}\n\n",
                        "error_page 404 /404.html; \n",
                        "location = /40x.html {\n",
                "}\n\n",
              "error_page 500 502 503 504 /50x.html;\n",
                  "location = /50x.html {\n",
              "}\n\n",
           "}\n\n",
          "}\n\n",

              "server_name eah.bcbsma.com {\n",
                      "charset utf-8; \n",
                      "client_max_body_size 0; \n",

                     "listen 8888 ssl;\n",
                     "ssl_certificate /etc/nginx/ssl/signcert.cer;\n",
                     "ssl_certificate_key /etc/nginx/ssl/certkey.key;\n",

               "location / {\n",
                     "proxy_pass https://hue;\n",
                     "proxy_set_header Host $http_host;\n",
                     "proxy_set_header X-Forwarded-For $remote_addr;\n",
                     "proxy_ssl_trusted_certificate /etc/nginx/ssl/trustcert.cer;\n\n",
               "}\n\n",
                     "error_page 404 /404.html; \n",
                     "location = /40x.html {\n",
                "}\n\n",
                     "error_page 500 502 503 504 /50x.html;\n",
                     "location = /50x.html {\n",
               "}\n\n",
             "}\n\n",
           "}\n\n",

           "server_name eah.bcbsma.com {\n",
                   "charset utf-8; \n",
                   "client_max_body_size 0; \n",

                  "listen 7187 ssl;\n",
                  "ssl_certificate /etc/nginx/ssl/signcert.cer;\n",
                  "ssl_certificate_key /etc/nginx/ssl/certkey.key;\n",

            "location / {\n",
                  "proxy_pass https://navigator;\n",
                  "proxy_set_header Host $http_host;\n",
                  "proxy_set_header X-Forwarded-For $remote_addr;\n",
                  "proxy_ssl_trusted_certificate /etc/nginx/ssl/trustcert.cer;\n\n",
            "}\n\n",
                  "error_page 404 /404.html; \n",
                  "location = /40x.html {\n",
             "}\n\n",
                  "error_page 500 502 503 504 /50x.html;\n",
                  "location = /50x.html {\n",
            "}\n\n",
          "}\n\n",
        "}\n\n",

        "server_name eah.bcbsma.com {\n",
                "charset utf-8; \n",
                "client_max_body_size 0; \n",

               "listen 11443 ssl;\n",
               "ssl_certificate /etc/nginx/ssl/signcert.cer;\n",
               "ssl_certificate_key /etc/nginx/ssl/certkey.key;\n",

         "location / {\n",
               "proxy_pass https://oozie;\n",
               "proxy_set_header Host $http_host;\n",
               "proxy_set_header X-Forwarded-For $remote_addr;\n",
               "proxy_ssl_trusted_certificate /etc/nginx/ssl/trustcert.cer;\n\n",
         "}\n\n",
               "error_page 404 /404.html; \n",
               "location = /40x.html {\n",
          "}\n\n",
               "error_page 500 502 503 504 /50x.html;\n",
               "location = /50x.html {\n",
         "}\n\n",
       "}\n\n",
     "}\n\n",

     "stream { \n",

     	"log_format basic '$remote_addr [$time_local] ' \n",
                          "'$protocol $status $bytes_sent $bytes_received ' \n",
                          "'$session_time'; \n",

          "access_log  /var/log/nginx/access-tcp.log basic; \n",


          "upstream hive { \n",
            "hash $remote_addr; \n",
            "server 10.33.0.0:10000; \n",
            "server 10.33.1.0:10000; \n",
          "}\n\n",

          "upstream impala { \n",
          	"hash $remote_addr; \n",
          	"server 10.33.0.0:21050; \n",
          	"server 10.33.1.0:21050; \n",
          "} \n\n",

          "server { \n",

      	    "listen 10000 ssl; \n",
      	    "ssl_certificate /etc/nginx/ssl/signcert.cer; \n",
      		  "ssl_certificate_key /etc/nginx/ssl/certkey.key; \n",

      		"proxy_ssl on; \n",
      		"proxy_ssl_trusted_certificate /etc/nginx/ssl/trustcert.cer; \n",

      		"proxy_pass hive; \n",

          "}\n\n",

          "server { \n"

      	    "listen 21050 ssl; \n",
      	    "ssl_certificate /etc/nginx/ssl/signcert.cer; \n",
      		  "ssl_certificate_key /etc/nginx/ssl/certkey.key; \n",

      		  "proxy_ssl on; \n",
       		  "proxy_ssl_trusted_certificate /etc/nginx/ssl/trustcert.cer; \n",

      	    "proxy_pass impala; \n",

          "}\n\n",
      "}\n\n"
                ]]},
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource LaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]},
		"mode"    : "000400",
		"owner"   : "root",
                "group"   : "root"
              }
            },

            "services" : {
              "sysvinit" : {
                "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup"} ],
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",

             "yum update -y aws-cfn-bootstrap\n",

             "yum update -y aws-cli\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource LaunchConfig ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource WebServerGroup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },

    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {

     "Type": "AWS::CloudWatch::Alarm",

     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "ApplicationLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties" : {
        "Subnets" : { "Ref" : "Subnets"}
      }
    },

    "ALBListener" : {
      "Type" : "AWS::ElasticLoadBalancingV2::Listener",
      "Properties" : {
        "DefaultActions" : [{
          "Type" : "forward",
          "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
        }],
        "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
        "Port" : "80",
        "Protocol" : "HTTP"
      }
    },

    "ALBTargetGroup" : {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties" : {
        "HealthCheckIntervalSeconds" : 30,
        "HealthCheckTimeoutSeconds" : 5,
        "HealthyThresholdCount" : 3,
        "Port" : 80,
        "Protocol" : "HTTP",
        "UnhealthyThresholdCount" : 5,
        "VpcId" : {"Ref" : "VpcId"}
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "The URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [
          "ApplicationLoadBalancer", "DNSName" ]}]]}
    }

  }

}

